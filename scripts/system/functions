# -*- shell-script -*-

if [[ "$1" == "start" ]]; then
    if [[ $STARTING ]]; then
        echo "A daemon is starting another daemon; this is unlikely to work as intended."
    else
        export STARTING=1
    fi
fi

# disable colours on broken terminals
TERM_COLOURS=$(tput colors 2>£{DEV}/null)
if (( $? != 3 )); then
    case $TERM_COLOURS in
        *[!0-9]*) USECOLOUR="";;
        [0-7])    USECOLOUR="";;
        '')       USECOLOUR="";;
    esac
fi
unset TERM_COLOURS

unquote() {
    local -r quotes=$'[\'"]'  #"

    if [[ ${1:0:1} = $quotes && ${1:(-1)} = "${1:0:1}" ]]; then
        printf '%s' "${1:1:(-1)}"
    else
        printf '%s' "$1"
    fi
}

# functions:

deltext() {
    printf "${DEL_TEXT}"
}

print_depr() {
    printf "${C_FAIL} ${1} is deprecated. See ${2} for details.${C_CLEAR} \n"
}

printhl() {
    printf "${C_OTHER}${PREFIX_HL} ${C_H1}${1}${C_CLEAR} \n"
}

printsep() {
    printf "\n${C_SEPARATOR}   ------------------------------\n"
}

stat_bkgd() {
    printf "${C_OTHER}${PREFIX_REG} ${C_MAIN}${1}${C_CLEAR} "
    deltext
    printf "   ${C_OTHER}[${C_BKGD}BKGD${C_OTHER}]${C_CLEAR} \n"
}

stat_busy() {
    printf "${C_OTHER}${PREFIX_REG} ${C_MAIN}${1}${C_CLEAR} "
    printf "${SAVE_POSITION}"
    deltext
    printf "   ${C_OTHER}[${C_BUSY}BUSY${C_OTHER}]${C_CLEAR} "
}

stat_append() {
    printf "${RESTORE_POSITION}"
    printf -- "${C_MAIN}${1}${C_CLEAR}"
    printf "${SAVE_POSITION}"
}

stat_done() {
    deltext
    printf "   ${C_OTHER}[${C_DONE}DONE${C_OTHER}]${C_CLEAR} \n"
}

stat_fail() {
    deltext
    printf "   ${C_OTHER}[${C_FAIL}FAIL${C_OTHER}]${C_CLEAR} \n"
}

stat_die() {
    stat_fail
    exit ${1:-1}
}

status() {
    local quiet
    case $1 in
        -q)
            quiet=1
            ;;&
        -v)
            # NOOP: supported for backwards compat
            shift
            ;;
    esac
    stat_busy "$1"
    shift
    if (( quiet )); then
        "$@" &>£{DEV}/null
    else
        "$@"
    fi
    local ret=$?
    (( ret == 0 )) && stat_done || stat_fail
    return $ret
}

# Status functions
status_started() {
    deltext
    echo -ne "$C_OTHER[${C_STRT}STARTED$C_OTHER]$C_CLEAR "
}

status_stopped() {
    deltext
    echo -ne "$C_OTHER[${C_STRT}STOPPED$C_OTHER]$C_CLEAR "
}

# Return PID of $1
get_pid() {
    pidof -o %PPID $1 || return 1
}

if (( RC_FUNCTIONS_HOOK_FUNCS_DEFINED != 1 )); then
    declare -A hook_funcs

    add_hook() {
        [[ $1 && $2 ]] || return 1
        hook_funcs[$1]+=" $2"
    }

    run_hook() {
        [[ $1 ]] || return 1
        local func
        for func in ${hook_funcs["$1"]}; do
            "${func}"
        done
    }

    declare -fr add_hook run_hook
    declare -r RC_FUNCTIONS_HOOK_FUNCS_DEFINED=1
fi

# set colours
if [[ $USECOLOUR != [nN][oO] ]]; then
    if tput setaf 0 &>£{DEV}/null; then
        C_CLEAR=$(tput sgr0)                 # clear text
        C_MAIN=${C_CLEAR}$(tput bold)        # main text
        C_OTHER=${C_MAIN}$(tput setaf 4)     # prefix & brackets
        C_SEPARATOR=${C_MAIN}$(tput setaf 0) # separator
        C_BUSY=${C_CLEAR}$(tput setaf 6)     # busy
        C_FAIL=${C_MAIN}$(tput setaf 1)      # failed
        C_DONE=${C_MAIN}                     # completed
        C_BKGD=${C_MAIN}$(tput setaf 5)      # backgrounded
        C_H1=${C_MAIN}                       # highlight text 1
        C_H2=${C_MAIN}$(tput setaf 6)        # highlight text 2
    else
        C_CLEAR="\e[m"          # clear text
        C_MAIN="\e[;1m"         # main text
        C_OTHER="\e[1;34m"      # prefix & brackets
        C_SEPARATOR="\e[1;30m"  # separator
        C_BUSY="\e[;36m"        # busy
        C_FAIL="\e[1;31m"       # failed
        C_DONE=${C_MAIN}        # completed
        C_BKGD="\e[1;35m"       # backgrounded
        C_H1=${C_MAIN}          # highlight text 1
        C_H2="\e[1;36m"         # highlight text 2
    fi
fi

# prefixes:

PREFIX_REG="::"
PREFIX_HL=" >"
