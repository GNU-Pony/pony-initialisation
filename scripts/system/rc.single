#!/usr/bin/python3
# -*- mode: python, coding: utf-8 -*-
#
# Single-user start-up script
#

import os
import time
import signal
from subprocess import Popen, PIPE


def _(*args):
    '''
    Spawn a subprocess an wait for it to exit
    
    @param   args  The command line arguments
    @return        Whether the process was successful
    '''
    proc = Popen(list(args))
    proc.wait()
    return proc.returncode == 0


def __(*args):
    '''
    Spawn a subprocess, but suppress stdout and stderr
    
    @param   args  The command line arguments
    @return        Whether the process
    '''
    return Popen(list(args), stdout = PIPE, stderr = PIPE)


### Prepare to exit current runlevel
if not os.getenv("PREVLEVEL", "") == "N":
    ### Stop all daemons
    _("daemond", "stop-all")
    
    
    ### Try to terminate all process, then kill them
    def kill_all_wait(sig, iterations):
        __("killall5", "-" + str(sig)).wait()
        for _ in range(iterations):
            time.sleep(0.25)
            proc = _("killall5", "-" + str(signal.SIGCONT))
            proc.wait()
            if proc.returncode == 2:
                return True
        return False
    kill_all_wait(signal.SIGTERM, 40) or kill_all_wait(signal.SIGKILL, 60)
    
    
    ### Start/trigger udev, load MODULES, and settle udev
    if not isinstance(MODULES, str):
        blacklist = list(filter(lambda module : module.startswith("!"), MODULES))
        if len(blacklist) > 0:
            blacklist = [blacklist[1:] for excl_module in blacklist]
            os.makedirs("£{RUN}/modprobe.d", exist_ok = True)
            with open("£{RUN}/modprobe.d/modprobe-blacklist.conf", "w") as file:
                file.write("# Autogenerated from rc.conf at boot, do not edit\n")
                file.write("blacklist %s\n" % " ".join(blacklist))
                file.flush()
    
    devd_command = 'devd' if in_path('devd') else 'udevd'
    devadm_command = 'devadm' if in_path('devadm') else 'udevadm'
    # You should really have symlinks named devd and devadm to your device daemon and controller
    
    _(devd_command, "--daemon")
    _(devadm_command, "trigger", "--action=add", "--type=subsystems")
    _(devadm_command, "trigger", "--action=add", "--type=devices")
    
    _("modprobe", "-ab", *list(filter(lambda module : not module.startswith("!"), MODULES)))
    
    _(devadm_command, "settle")


### Stop boot logging
if os.path.exists("£{RUN}/bootlogd.pid"):
    with open("£{VAR_LOG}/boot", "a") as file:
        file.flush()
    with open("£{RUN}/bootlogd.pid", "r") as file:
        os.kill(int(file.read().replace("\n", "")), signal.TERM)
    os.remove("£{RUN}/bootlogd.pid")


### Switch runlevel
if os.getenv("RUNLEVEL", "") == "1":
    os.kill(1, signal.SIGHUP)
    os.execv("£{SBIN}/init", "init", "-t1", "S")

