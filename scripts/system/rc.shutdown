#!/usr/bin/python3
# -*- mode: python, coding: utf-8 -*-
#
# System shutdown script
#

### Load libraries

_msg = 'Load libraries'
_working()

import os
import time
import signal
from subprocess import Popen, PIPE

from rcfunctions import *
from rclexal import *
_ = spawn(*args)
def do(function):
    _working()
    try:
        function()
        _done()
    except:
        _failure()

_done()



### Avoid staircase effect

_("stty", "onlcr")



### Load variables

_msg = 'Load variables'
_working()

rc_conf = try_invoke(lambda : sh_lex("£{ETC}/rc.conf"))
if rc_conf is None:
    rc_conf = {}

CPU_COUNT  = kernel_opts("--init-threads", lambda x : int(x))
CPU_COUNT  = get(CPU_COUNT, lambda : len(os.listdir("£{SYS}/bus/cpu/devices")), 4)
TIMEZONE   = get(None, rc_conf, "TIMEZONE", "")
USELVM     = get(None, rc_conf, "USELVM", "").lower() == "yes"
USECOLOUR  = get(None, rc_conf, "USECOLOUR", "")

_done()



### Print want is happening

print("")
_singular("Initiating shutdown...")
print("")



### Run local rc.shutdown scripts

_msg = 'Run local rc.shutdown scripts'
do(lambda : os.access("£{ETC}/rc.local.shutdown", os.F_OK | os.R_OK | os.X_OK) and _("£{ETC}/rc.local.shutdown"))



### Stop all daemons

_msg = 'Stop all daemons'
do(lambda : _("daemond", "stop-all", "--usecolours=" + USECOLOUR))



### Save random seed

_msg = 'Save random seed'
_working()

random_seed = "£{VAR_LIB}/£{MISC}/random-seed"
pool_file = "£{PROC}/sys/kernel/random/poolsize"
pool_size = 512

try:
    os.makedirs("£{VAR_LIB}/£{MISC}", mode = 0o755, exist_ok = True)
    with open(random_seed, "w") as file:
        file.flush()
    os.chmod(random_seed, 0o600)
    
    if os.access(pool_file, os.F_OK | os.R_OK):
        with open(pool_file, "r") as file:
            pool_size = int(file.read().replace("\n", "")) // 8
        with open("£{DEV}/urandom", "rb") as ifile:
            with open(random_seed, "wb") as ofile:
                ofile.write(ifile.read(pool_size))
                ofile.flush()
    
    _done()
except:
    _failure()


### Configure time zone

_msg = 'Configure time zone'
_working()
try:
    if not TIMEZONE == "":
        zonefile = "£{USR}£{SHARE}/zoneinfo/" + TIMEZONE
        if not os.path.exists(zonefile):
            print('Invalid time zone specified in £{ETC}/rc.conf')
            _failure('Configure time zone')
        elif not os.path.islink("£{ETC}/localtime"):
            if os.path.realpath("£{ETC}/localtime") != os.path.realpath(zonefile):
                os.remove("£{ETC}/localtime")
                os.unlink(zonefile, "£{ETC}/localtime")
            _done()
    else:
        _done()
except:
    _failure()



### Write to wtmp file before unmounting

_msg = 'Write to wtmp file'
do(lambda : _("halt", "-w"))



### Deactivate monitoring of LVM groups

_msg = 'Deactivate monitoring of LVM groups'
do(lambda : USELVM and in_path("lwm") and _("vgchange", "--monitor", "n"))



### Any future uevents can and should be ignored: shutting down devd

_msg = 'Shut down devd'
do(lambda : _('devadm' if in_path('devadm') else 'udevadm', "control", "--exit"))
# You should really have a symlink named devadm to your device controller



### Try to terminate all process, then kill them

_msg = 'Terminate all process'
_working()
try:
    def kill_all_wait(sig, iterations):
        Popen(["killall5", "-" + str(sig)], stdout = PIPE, stderr = PIPE).wait()
        for _ in range(iterations):
            time.sleep(0.25)
            proc = Popen(["killall5", "-" + str(signal.SIGCONT)])
            proc.wait()
            if proc.returncode == 2:
                return True
        return False
    
    (kill_all_wait(signal.SIGTERM, 40) or kill_all_wait(signal.SIGKILL, 60) or _failure()) and _done()
except:
    _failure()



### Deactivate swap

# Almost everything is dead now, so the swap should hopefully be relatively
# empty, and quick to switch off.

_msg = 'Deactivate swap'
do(lambda : _("swapoff", "-a"))



## Unmount swap-backed filesystems

# Unmount any non-API partitions that are backed by swap; we don't want to
# move their contents into memory (waste of time and might cause OOM).

_msg = 'Unmount swap-backed filesystems'
do(lambda : umount_all("tmpfs"))



### Unmount non-API filesystems

_msg = 'Unmount non-API filesystems'
do(lambda : umount_all())



### Kill non-root encrypted partition mappings

if os.path.exists("£{ETC}/crypttab") and in_path("cryptsetup"):
    # Maybe somepony has LVM on an encrypted block device
    # executing an extra vgchange is errorless
    _msg = 'Deactivating LVM groups'
    do(lambda : USELVM and Popen(["vgchange", "--sysinit", "-a", "n"], stdout = PIPE, stderr = PIPE).wait())
    
    _msg = 'Kill non-root encrypted partition mappings'
    _working()
    try:
        crypttab, failed = None, False
        with open("£{ETC}/crypttab", "rb") as file:
            crypttab = file.read()
        crypttab = sh_tab(crypttab.decode("utf-8", "replace"), 4)
        crypttab = [e[:3] + [" ".join(e[3:])] for e in crypttab]
        for (name, _device, _password, _options) in crypttab:
            # Detaching encrypted device
            Popen(["cryptsetup", "remove", name], stdout = PIPE, stderr = PIPE).wait()
        _done()
    except:
        _failure()



### Deactivating LVM groups

_msg = 'Deactivating LVM groups'
do(lambda : USELVM and in_path("lvm") and Popen(["vgchange", "--sysinit", "-a", "n"], stdout = PIPE, stderr = PIPE).wait())



if os.access("£{RUN}/initramfs/shutdown", os.F_OK | os.R_OK | os.X_OK):
    ### Decide what we want to do
    _msg = 'Decide what we want to do'
    _working()
    action = "poweroff"
    if os.getenv("RUNLEVEL", "") == "0":
        action = "reboot"
        try:
            with open("£{SYS}/kernel/kexec_loaded", "r") as file:
                if not file.read().replace("\n", "") == "1":
                    action = "kexec"
        except:
            pass
    _done()
    
    ### Make /run/initramfs a mount
    _msg = 'Make /run/initramfs a mount'
    do(lambda : _("mount", "--bind", "£{RUN}/initramfs", "£{RUN}/initramfs"))
    
    ### In case somepony has shared our mountpoints, unshare them
    _msg = 'Unshared mountpoints'
    _working()
    try_invoke(_("mount", "--make-private", "£{RUN}/initramfs"))
    try_invoke(_("mount", "--make-private", "/"))
    _done()
    
    ### Bind all API mounts
    _msg = 'Bind all API mounts'
    _working()
    try:
        all_mounted = True
        if not os.path.exists("/oldroot"):
            os.mkdir("/oldroot")
        for mount_point in ["£{SYS}", "£{PROC}", "£{DEV}", "£{RUN}"]:
            os.makedirs("£{RUN}/initramfs" + mount_point, exist_ok = True)
            try:
                _("mount", "--bind", mount_point, "£{RUN}/initramfs" + mount_point)
            except:
                all_mounted = False
        (all_mounted and _done()) or _failure()
    except:
        _failure()
    
    ### Enter shutdownramfs
    _msg = 'Enter shutdownramfs'
    _working()
    try:
        os.chdir("£{RUN}/initramfs")
        _("pivot_root", ".", "oldroot")
        _done()
    except:
        _failure()
    
    ### Reexec init
    _msg = 'Reexec init'
    do(lambda : _("/oldroot£{SBIN}/init", "u"))
    
    ### Run /shutdown in the new root
    _msg = 'Switch to £{DEV}/console'
    _working()
    os.close(0)
    os.close(1)
    os.close(2)
    os.open("£{DEV}/console", os.O_RDWR)
    os.dup2(0, 1)
    os.dup2(0, 2)
    _done()
    _singular('chroot /shutdown')
    os.execlp("chroot", "chroot", ".", "/shutdown", action)

else:
    ### Remount root filesystem read-only
    _msg = 'Remount root filesystem read-only'
    do(lambda : _("mount", "-o", "remount,ro", "/"))

    ### Power off or reboot
    if os.getenv("RUNLEVEL", "") == "0":
        _singular('Power off')
        try_invoke(lambda : _("poweroff", "-d", "-f", "-h", "-i"))
    else:
        # If kexec is installed and a kernel is loaded, use it
        if in_path("kexec"):
            _msg = 'Run kexec'
            do(lambda : Popen(["kexec", "-e"], stdout = PIPE, stderr = PIPE).wait())
        _singular('Reboot')
        try_invoke(lambda : _("reboot", "-d", "-f", "-i"))

