#!/usr/bin/python3
# -*- mode: python, coding: utf-8 -*-
#
# Multi-user start-up script
#

import os
import signal
from subprocess import Popen, PIPE

from rcfunctions import *
from rclexal import *

rc_conf = try_invoke(lambda : sh_lex("£{ETC}/rc.conf"))
if rc_conf is None:
    rc_conf = {}

CPU_COUNT = kernel_opts("--init-threads", lambda x : int(x))
CPU_COUNT = get(CPU_COUNT, lambda : len(os.listdir("£{SYS}/bus/cpu/devices")), 4)
USECOLOUR = get(None, rc_conf, "USECOLOUR", "")

os.putenv("USECOLOUR", USECOLOUR)



### Sanitize PATH (will be overridden later by £{ETC}/profile)
os.putenv("PATH", "£{LOCAL}£{SBIN}:£{LOCAL}£{BIN}:£{USR}£{SBIN}:£{USR}£{BIN}:£{SBIN}:£{BIN}")

### Clear TZ, so daemons always respect £{ETC}/localtime
os.unsetenv("TZ")


### Run early local rc.multi scripts
try:
    if os.access("£{ETC}/rc.local.early", os.F_OK | os.R_OK | os.X_OK):
        Popen(["£{ETC}/rc.local.early"]).wait()
except:
    pass # TODO


### Start daemons
try:
    cmd = ["daemond", "--cpus=%i" % CPU_COUNT, "--usecolour=" + USECOLOUR, "--"]
    legacy_daemons = sh_lex("£{ETC}/rc.conf")
    legacy_daemons = legacy_daemons["DAEMONS"] if "DAEMONS" in legacy_daemons else None
    if (legacy_daemons is not None) and isinstance(legacy_daemons, str):
        legacy_daemons = legacy_daemons.split(" ")
    cmd += legacy_daemons
    popen(cmd).wait()
except:
    pass # TODO


### Run late local rc.multi scripts
try:
    if os.access("£{ETC}/rc.local", os.F_OK | os.R_OK | os.X_OK):
        Popen(["£{ETC}/rc.local"]).wait()
except:
    pass # TODO


### Stop boot logging
try:
    if os.path.exists("£{RUN}/bootlogd.pid"):
        with open("£{VAR_LOG}/boot", "a") as file:
            file.flush()
        with open("£{RUN}/bootlogd.pid", "r") as file:
            os.kill(int(file.read().replace("\n", "")), signal.SIGTERM)
        os.remove("£{RUN}/bootlogd.pid")
except:
    pass # TODO


### Remove /run/nologin
try:
    if os.path.exists("£{RUN}/nologin"):
        os.remove("£{RUN}/nologin")
except:
    pass # TODO

