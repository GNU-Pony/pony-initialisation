#!/usr/bin/python3
# -*- mode: python, coding: utf-8 -*-
#
# Multi-user start-up script
#

import os
import signal
from subprocess import Popen, PIPE

from lexal import sh_lex


CPU_COUNT = kernel_opts("--init-threads", lambda x : int(x))
CPU_COUNT = get(CPU_COUNT, lambda : len(os.listdir("£{SYS}/bus/cpu/devices")), 4)



### Sanitize PATH (will be overridden later by £{ETC}/profile)
os.putenv("PATH", "£{LOCAL}£{SBIN}:£{LOCAL}£{BIN}:£{USR}£{SBIN}:£{USR}£{BIN}:£{SBIN}:£{BIN}")

### Clear TZ, so daemons always respect £{ETC}/localtime
os.unsetenv("TZ")


### Run early local rc.multi scripts
if os.access("£{ETC}/rc.local.early", os.F_OK | os.R_OK | os.X_OK):
    Popen(["£{ETC}/rc.local.early"]).wait()


### Start daemons
Popen(["daemond", "--cpus=%i" % CPU_COUNT, "--"] + sh_lex("£{ETC}/daemontab")["DAEMONS"]).wait()


### Run late local rc.multi scripts
if os.access("£{ETC}/rc.local", os.F_OK | os.R_OK | os.X_OK):
    Popen(["£{ETC}/rc.local"]).wait()


### Stop boot logging
if os.path.exists("£{RUN}/bootlogd.pid"):
    with open("£{VAR_LOG}/boot", "a") as file:
        file.flush()
    with open("£{RUN}/bootlogd.pid", "r") as file:
        os.kill(int(file.read().replace("\n", "")), signal.TERM)
    os.remove("£{RUN}/bootlogd.pid")

### Remove /run/nologin
os.remove("£{RUN}/nologin")

