#!/usr/bin/python3
# -*- mode: python, coding: utf-8 -*-
#
# Multi-user start-up script
#

_msg = None
_working  = lambda text = None : print(      '\033[01;33m%s\033[00;30m [WORK]\033[00m'   % (_msg if text is None else text))
_done     = lambda text = None : print('\033[A\033[01;32m%s\033[00;30m [DONE]\033[00m'   % (_msg if text is None else text))
_failure  = lambda text = None : print(      '\033[01;32m%s\033[00;30m [FAIL]\033[00m'   % (_msg if text is None else text))



### Load libraries

_msg = 'Load libraries'
_working()

import os
import signal
from subprocess import Popen, PIPE

from rcfunctions import *
from rclexal import *
def do(function):
    _working()
    try:
        function()
        _done()
    except:
        _failure()

_done()



### Load variables

_msg = 'Load variables'
_working()

rc_conf = try_invoke(lambda : sh_lex("£{ETC}/rc.conf"))
if rc_conf is None:
    rc_conf = {}

CPU_COUNT = kernel_opts("--init-threads", lambda x : int(x))
CPU_COUNT = get(CPU_COUNT, lambda : len(os.listdir("£{SYS}/bus/cpu/devices")), 4)
USECOLOUR = get(None, rc_conf, "USECOLOUR", "")

os.putenv("USECOLOUR", USECOLOUR)

if USECOLOUR.lower().startswith('n'):
    _working  = lambda text = None : print('%s [WORK]' % (_msg if text is None else text))
    _done     = lambda text = None : print('%s [DONE]' % (_msg if text is None else text))
    _failure  = lambda text = None : print('%s [FAIL]' % (_msg if text is None else text))

_done()



### Sanitize PATH (will be overridden later by £{ETC}/profile)
_msg = 'Sanitize PATH'
do(lambda : os.putenv("PATH", "£{LOCAL}£{SBIN}:£{LOCAL}£{BIN}:£{USR}£{SBIN}:£{USR}£{BIN}:£{SBIN}:£{BIN}"))

### Clear TZ, so daemons always respect £{ETC}/localtime
_msg = 'Clear TZ'
do(lambda : os.unsetenv("TZ"))


### Run early local rc.multi scripts
_msg = 'Run early local rc.multi scripts'
do(lambda : os.access("£{ETC}/rc.local.early", os.F_OK | os.R_OK | os.X_OK) and Popen(["£{ETC}/rc.local.early"]).wait())


### Start daemons
_msg = 'Start daemons'
_working()
try:
    cmd = ["daemond", "--cpus=%i" % CPU_COUNT, "--usecolour=" + USECOLOUR, "--"]
    legacy_daemons = sh_lex("£{ETC}/rc.conf")
    legacy_daemons = legacy_daemons["DAEMONS"] if "DAEMONS" in legacy_daemons else None
    if (legacy_daemons is not None) and isinstance(legacy_daemons, str):
        legacy_daemons = legacy_daemons.split(" ")
    cmd += legacy_daemons
    popen(cmd).wait()
    _done()
except:
    _failure()


### Run late local rc.multi scripts
_msg = 'Run late local rc.multi scripts'
do(lambda : os.access("£{ETC}/rc.local", os.F_OK | os.R_OK | os.X_OK) and Popen(["£{ETC}/rc.local"]).wait())


### Stop boot logging
_msg = 'Stop boot logging'
_working()
try:
    if os.path.exists("£{RUN}/bootlogd.pid"):
        with open("£{VAR_LOG}/boot", "a") as file:
            file.flush()
        with open("£{RUN}/bootlogd.pid", "r") as file:
            os.kill(int(file.read().replace("\n", "")), signal.SIGTERM)
        os.remove("£{RUN}/bootlogd.pid")
    _done()
except:
    _failure()


### Remove /run/nologin
_msg = 'Remove /run/nologin'
do(lambda : os.path.exists("£{RUN}/nologin") and os.remove("£{RUN}/nologin"))

